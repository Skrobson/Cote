#version 330 core

in vec2 textureCoord;
in vec3 normal; 
in vec3 fragPos;
out vec4 color;

struct Material {
    sampler2D diffuse;
	sampler2D specular;
   
    float shininess;
}; 
  uniform Material material;
  
struct DirectionalLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform DirectionalLight dirLight; 
vec3 CalcDirLightMapp(DirectionalLight light, vec3 normal, vec3 viewDir);  


 
struct PointLight {
    vec3 position;  
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};
uniform PointLight posLight; 
uint posLightNum;
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);   


uniform sampler2D texture_diffuse1;
uniform sampler2D texture_diffuse2;
uniform sampler2D texture_specular1;
uniform sampler2D texture_specular2;
uniform sampler2D texture_normals1;
uniform sampler2D emission;

uniform vec3 viewPos;

uniform bool normalMapping;
uniform bool diffuseMapping;
uniform bool specularMapping;

void main()
{
	vec3 norm=normalize(normal);
	if(normalMapping){
		norm=texture(texture_normals1, textureCoord).rgb;
		norm=normalize(norm *2.0 - 1.0);
	}
	vec3 viewDir = normalize(viewPos - fragPos);


	                             
	//vec3 emission = vec3(texture(emission, textureCoord));
								  
    vec3 result = CalcDirLightMapp(dirLight,norm,viewDir);   
	result+=CalcPointLight(posLight,norm,fragPos,viewDir);
	//vec3 result = CalcPointLight(posLight,norm,fragPos,viewDir);
	//+ emission
	
	color = vec4(result, 1.0f);
	
}
     
//functions
vec3 CalcDirLightMapp(DirectionalLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(texture_diffuse1, textureCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(texture_diffuse1, textureCoord));
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, textureCoord));
    return (ambient + diffuse + specular);
}  

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(texture_diffuse1, textureCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(texture_diffuse1, textureCoord));
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, textureCoord));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}
