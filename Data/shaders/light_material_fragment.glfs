#version 330 core

in vec2 textureCoord;
in vec3 normal; 
in vec3 fragPos;
out vec4 color;


struct DirectionalLight {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;  
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
    float constant;
    float linear;
    float quadratic;
}; 

uniform DirectionalLight directionalLight;    

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;


uniform vec3 viewPos;


vec3 calcDirLight(DirectionalLight light, vec3 normal, vec3 viewDir); 

void main()
{

	vec3 norm = normalize(normal);
	vec3 viewDir = normalize(viewPos - fragPos);
	
	vec3 directionalResult = calcDirLight(directionalLight, norm, viewDir);
	color = vec4(directionalResult, 1.0f);//
}


    vec3  calcDirLight(DirectionalLight light, vec3 normal, vec3 viewDir)
	{
		vec3 ambient  =directionalLight.ambient * vec3(texture(texture_diffuse1,textureCoord));
	
		float shininess;
		shininess =32.0;

		vec3 lightDir = normalize(-directionalLight.direction); 
		float diff = max(dot(normal, lightDir), 0.0);
		
		vec3 diffuse  = directionalLight.diffuse * diff * vec3(texture(texture_diffuse1,textureCoord));
	
		
		vec3 reflectDir = reflect(-lightDir, normal);  
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), 64);
	
		vec3 specular = directionalLight.specular * spec * vec3(texture(texture_specular1,textureCoord));  
		
		vec3 result = diffuse + ambient + specular ;
		return result;
	}