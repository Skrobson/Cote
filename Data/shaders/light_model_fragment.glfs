#version 330 core

in vec2 textureCoord;
in vec3 normal; 
in vec3 fragPos;
out vec4 color;

struct Material {

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
  
  
struct Light {
    vec3 position;
	vec3 color;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;    
uniform Material material;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_diffuse2;
uniform sampler2D texture_diffuse3;
uniform sampler2D texture_specular1;
uniform sampler2D texture_specular2;

//uniform vec3 lightColor;
//uniform vec3 lightPos;
uniform vec3 viewPos;
//uniform vec4 uniformColor;

void main()
{
	
	
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(light.position - fragPos); 
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  

	//diffuse
	float diff = max(dot(norm, lightDir), 0.0);
	//vec3 diffuse =lightColor * diffuse;
	
	//specular
	//float specularStrength = 0.5f;
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	//vec3 specular =lightColor* specular;
	
    //ambient
   // vec3 ambient =lightColor * ambient ;
	
	
	
	
	vec3 ambient  =(light.color * light.ambient) * material.ambient;
	vec3 diffuse  =(light.color * light.diffuse) * (diff * material.diffuse);
	vec3 specular =(light.color * light.specular) * (spec * material.specular);  
	
    vec3 result = (ambient + diffuse+specular);
	
	vec4 tex= vec4(texture(texture_diffuse1,textureCoord));
	color = vec4(result, 1.0f)*tex;
	
}
     
