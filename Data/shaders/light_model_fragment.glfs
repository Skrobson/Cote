#version 330 core

in vec2 textureCoord;
in vec3 normal; 
in vec3 fragPos;
out vec4 color;


struct Light {
    vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;    

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;


uniform vec3 viewPos;



void main()
{

	vec3 ambient  =light.ambient * vec3(texture(texture_diffuse1,textureCoord));
	
	
	float shininess;
	shininess =32.0;
	
	vec3 norm = normalize(normal);
	
	vec3 lightDir = normalize(-light.direction); 
	float diff = max(dot(norm, lightDir), 0.0);
	
	vec3 diffuse  = light.diffuse * diff * vec3(texture(texture_diffuse1,textureCoord));
	
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 64);
	
	vec3 specular = light.specular * spec * vec3(texture(texture_specular1,textureCoord));  
		
	vec3 result = diffuse + ambient + specular ;
	
	//vec3 result = light.direction ;
	
	color = vec4(result, 1.0f);//
	
}
     
